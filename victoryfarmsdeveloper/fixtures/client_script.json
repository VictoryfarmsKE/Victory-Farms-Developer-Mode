[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Appraisal",
  "enabled": 1,
  "modified": "2025-04-28 20:16:55.839105",
  "module": "VictoryFarmsDeveloper",
  "name": "Appraisal List View",
  "script": "frappe.listview_settings['Appraisal'] = {\r\n    hide_name_column: true,\r\n    formatters: {\r\n        'total_goal_score_percentage': function(value, df, doc) {\r\n            if (df.fieldtype === \"Percent\") {\r\n                return `${value}%`;\r\n            }\r\n            return frappe.format(value, df, null, doc);\r\n        }\r\n    }\r\n};\r\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Department Appraisal",
  "enabled": 1,
  "modified": "2025-04-16 18:42:27.430407",
  "module": "VictoryFarmsDeveloper",
  "name": "Department Scoring References",
  "script": "frappe.ui.form.on(\"Department Appraisal\", {\r\n  refresh: function (frm) {\r\n    render_goal_template(frm);\r\n  },\r\n  department: function (frm) {\r\n    render_goal_template(frm);\r\n  },\r\n});\r\n\r\nfunction render_goal_template(frm) {\r\n  if (!frm.doc.department) {\r\n    frm.fields_dict.custom_scoring_references.$wrapper.html(\r\n      \"<p><i>Please select a department.</i></p>\"\r\n    );\r\n    return;\r\n  }\r\n\r\n  frappe.call({\r\n    method: \"victoryfarmsdeveloper.victoryfarmsdeveloper.customization.department_appraisal.department_appraisal.get_rendered_scoring_references\",\r\n    args: {\r\n      department: frm.doc.department,\r\n      doc_name: frm.doc.name,\r\n    },\r\n    callback: function (r) {\r\n      frm.fields_dict.custom_scoring_references.$wrapper.html(\r\n        r.message || \"<p><i>Unable to load template.</i></p>\"\r\n      );\r\n    },\r\n  });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Department Appraisal",
  "enabled": 1,
  "modified": "2025-04-15 10:51:34.610193",
  "module": "VictoryFarmsDeveloper",
  "name": "Default Multiplier Score",
  "script": "frappe.ui.form.on('Department Appraisal', {\r\n  multiplier_template: function(frm) {\r\n    frappe.after_ajax(() => {\r\n      frm.fields_dict['appraisal_multiplier'].grid.refresh();\r\n      setTimeout(() => {\r\n        frm.fields_dict['appraisal_multiplier'].grid.grid_rows.forEach(row => {\r\n          if (!row.doc.score) {\r\n            row.doc.score = \"1\";\r\n          }\r\n        });\r\n        frm.refresh_field('appraisal_multiplier');\r\n      }, 10);\r\n    });\r\n  }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-04-02 09:17:54.504410",
  "module": "VictoryFarmsDeveloper",
  "name": "Sum Qtys and Crates",
  "script": "frappe.ui.form.on('Stock Entry', {\r\n        onload: function (frm) {\r\n                if (!frm.doc.custom_total_qty && !frm.doc.custom_number_of_crates) {\r\n                        frm.doc.custom_total_qty = 0;\r\n                        frm.doc.custom_number_of_crates = 0;\r\n                        cur_frm.refresh_field('custom_total_qty');\r\n                        cur_frm.refresh_field('custom_number_of_crates');\r\n                }\r\n\r\n                let total_qty = 0;\r\n                let number_of_crates = 0;\r\n\r\n                frm.doc.items.forEach((entry) => {\r\n                        if (entry.item_code != 'Crates') {\r\n                                total_qty += entry.qty;\r\n                                if (entry.vf_crate_no) {\r\n                                        number_of_crates += 1;\r\n                                }\r\n                        } else {\r\n                                number_of_crates = entry.qty;\r\n                        }\r\n                });\r\n\r\n                frm.doc.custom_total_qty = total_qty;\r\n                frm.doc.custom_number_of_crates = number_of_crates;\r\n                cur_frm.refresh_field('custom_total_qty');\r\n                cur_frm.refresh_field('custom_number_of_crates');\r\n        }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2025-04-02 09:17:04.196850",
  "module": "VictoryFarmsDeveloper",
  "name": "Payroll Cost Center Mapping",
  "script": "frappe.ui.form.on('Employee', {\r\n    department: function(frm) {\r\n        if (frm.doc.department) {\r\n            frappe.db.get_value('Department', frm.doc.department, 'payroll_cost_center', (r) => {\r\n                if (r && r.payroll_cost_center) {\r\n                    frm.set_value('payroll_cost_center', r.payroll_cost_center);\r\n                } else {\r\n                    frm.set_value('payroll_cost_center', null);\r\n                }\r\n            });\r\n        } else {\r\n            frm.set_value('payroll_cost_center', null);\r\n        }\r\n    },\r\n    validate: function(frm) {\r\n        if (frm.doc.department) {\r\n            frappe.db.get_value('Department', frm.doc.department, 'payroll_cost_center', (r) => {\r\n                if (r && r.payroll_cost_center && r.payroll_cost_center !== frm.doc.payroll_cost_center) {\r\n                    frappe.msgprint(__('Payroll Cost Center does not match the Department\\'s Payroll Cost Center.'));\r\n                    frappe.validated = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2025-04-02 09:17:33.696421",
  "module": "VictoryFarmsDeveloper",
  "name": "Update Employee Payroll Cost Centers",
  "script": "frappe.listview_settings['Employee'] = {\r\n    onload: function(listview) {\r\n        listview.settings.add_fields = ['department'];\r\n\r\n        listview.page.add_action_item(__('Update Payroll Cost Center'), function() {\r\n            let selected_employees = listview.get_checked_items();\r\n\r\n            if (selected_employees.length === 0) {\r\n                frappe.msgprint(__('Please select at least one employee.'));\r\n                return;\r\n            }\r\n\r\n            frappe.show_alert({\r\n                message: __('Updating Payroll Cost Center for selected employees'),\r\n                indicator: 'blue'\r\n            });\r\n\r\n            let updated_count = 0;\r\n            let total_employees = selected_employees.length;\r\n\r\n            function processEmployee(index) {\r\n                if (index >= total_employees) {\r\n                    frappe.msgprint({\r\n                        title: __('Process Complete'),\r\n                        message: `${updated_count} out of ${total_employees} employees updated successfully.`,\r\n                        indicator: updated_count === total_employees ? 'green' : 'orange'\r\n                    });\r\n                    listview.refresh();\r\n                    return;\r\n                }\r\n\r\n                let emp = selected_employees[index];\r\n\r\n                frappe.db.get_value('Employee', emp.name, 'department', (r) => {\r\n                    if (!r || !r.department) {\r\n                        console.log(`Employee ${emp.name} has no department.`);\r\n                        processEmployee(index + 1);\r\n                        return;\r\n                    }\r\n\r\n                    frappe.db.get_value('Department', r.department, 'payroll_cost_center', (dept) => {\r\n                        if (!dept || !dept.payroll_cost_center) {\r\n                            console.log(`Department ${r.department} has no payroll cost center.`);\r\n                            processEmployee(index + 1);\r\n                            return;\r\n                        }\r\n\r\n                        frappe.db.set_value('Employee', emp.name, {\r\n                            payroll_cost_center: dept.payroll_cost_center\r\n                        }).then(() => {\r\n                            updated_count++;\r\n                            processEmployee(index + 1);\r\n                        }).catch((err) => {\r\n                            console.error(`Error updating ${emp.name}:`, err);\r\n                            processEmployee(index + 1);\r\n                        });\r\n                    });\r\n                });\r\n            }\r\n\r\n            processEmployee(0);\r\n        });\r\n        listview.page.add_action_item(__(\"Update Base Salary\"), () => {\r\n            const selected_values = listview.get_checked_items();\r\n\t\t\tfrappe.call({\r\n\t\t\t\tmethod: \"navari_vf.navari_vf.customizations.employee.utils.update_salary_details.update_salary_details\",\r\n\t\t\t\tfreeze: true,\r\n\t\t\t\targs: {\r\n\t\t\t\t\tselected_values: selected_values,\r\n\t\t\t\t},\r\n\t\t\t\tcallback: function (r) {\r\n\t\t\t\t\tif (!r.exc) {\r\n                        frappe.msgprint(__(\"Salary details updated for selected Employees\"))\r\n\t\t\t\t\t\tlistview.refresh();\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t});\r\n        })\r\n    }\r\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-04-08 09:21:07.023979",
  "module": "VictoryFarmsDeveloper",
  "name": "Redeem Points",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    before_save: function(frm) {\n        // Set the selling_price_list to \"Victory Farms Loyalty Program\"\n        frm.set_value('selling_price_list', 'Victory Farms Loyalty Program');\n        \n        // Check if redeem_loyalty_points is checked and doc status is Draft\n        if (frm.doc.redeem_loyalty_points && frm.doc.docstatus === 0) {\n            let grand_total = frm.doc.grand_total;\n\n            frm.doc.items = frm.doc.items.map(item => {\n                \n                // Calculate loyalty points based on loyalty item\n                if (item.item_name === \"Trolley Cooler Box\") {\n                    item.loyalty_points = grand_total / 1.14;\n                } else if (item.item_name === \"Apron\") {\n                    item.loyalty_points = grand_total / 3.47;\n                } else if (item.item_name === \"Parasol\") {\n                    item.loyalty_points = grand_total / 5;\n                } else if (item.item_name === \"Large Frying Pan\") {\n                    item.loyalty_points = grand_total / 2.2;\n                } else if (item.item_name === \"Ladle\") {\n                    item.loyalty_points = grand_total / 2.5;\n                } else if (item.item_name === \"Dust Coat\") {\n                    item.loyalty_points = grand_total / 4.7;\n                } else {\n                    item.loyalty_points = grand_total / 1; \n                }\n\n                // Set income_account and expense_account directly\n                item.income_account = '600016 - Grant Loyalty Earned - VFL';\n                item.expense_account = '600015 - KES Grant Liability - VFL';\n                item.cost_center = '406001 - Commercial Management - VFL';\n\n                return item;\n            });\n\n           // Refresh the items table to reflect changes\n            frm.refresh_field('items');\n\n            // Calculate and set the total loyalty points (rounded)\n            const total_loyalty_points = frm.doc.items.reduce((sum, item) => sum + (item.loyalty_points || 0), 0);\n            frm.set_value('loyalty_points', Math.round(total_loyalty_points));\n            // frm.set_value('paid_amount', grand_total);\n            // frm.set_value('loyalty_amount', grand_total);\n\n            // Set correct debit_to account\n            // frm.set_value('debit_to', '600016 - Grant Loyalty Earned - VFL');\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Requisition Form",
  "enabled": 1,
  "modified": "2025-03-18 13:35:17.503215",
  "module": "VictoryFarmsDeveloper",
  "name": "Req Form Item Project",
  "script": "frappe.ui.form.on('Requisition Form', {\r\n    custom_project: function(frm) {\r\n        frm.fields_dict.items.grid.get_field('project').df.reqd = frm.doc.custom_project ? 1 : 0;\r\n        frm.fields_dict.items.grid.refresh();\r\n    },\r\n    validate: function(frm) {\r\n        if (frm.doc.custom_project) {\r\n            frm.doc.items.forEach(function(item) {\r\n                if (!item.project) {\r\n                    frappe.throw(__('Project is mandatory for all items when Project is set.'));\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Requisition Form Item', {\r\n    project: function(frm, cdt, cdn) {\r\n        var item = locals[cdt][cdn];\r\n        if (frm.doc.custom_project && !item.project) {\r\n            frappe.model.set_value(cdt, cdn, 'project', frm.doc.custom_project);\r\n        }\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Appraisal",
  "enabled": 1,
  "modified": "2025-02-25 09:17:00.688667",
  "module": "VictoryFarmsDeveloper",
  "name": "Appraisal Score Definitions",
  "script": "frappe.ui.form.on('Appraisal Goal', {\r\n     score(frm, cdt, cdn) {\r\n        let d = locals[cdt][cdn];\r\n        if (d.score) {\r\n            if (d.score < 1) {\r\n                frappe.throw(__(\"Score should be between 1 to 5\")) \r\n            }\r\n            frappe.model.set_value(cdt, cdn, \"score\", Math.round(d.score))\r\n        }\r\n    }\r\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Requisition Form",
  "enabled": 1,
  "modified": "2025-04-11 10:57:38.598024",
  "module": "VictoryFarmsDeveloper",
  "name": "Purchase Requisitions",
  "script": "frappe.ui.form.on('Requisition Form', {\n    onload: function (frm) {\n        // Check if the user has a specific role\n        if (!frappe.user_roles.includes('Store Assistant')) {\n            // Filter out the \"Purchase\" option for users without the role\n            frm.set_df_property('material_request_type', 'options', [\n                'Material Transfer',\n                'Material Issue',\n                'Manufacture',\n                'Customer Provided'\n            ]);\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Application",
  "enabled": 1,
  "modified": "2025-05-24 22:07:12.364502",
  "module": "VictoryFarmsDeveloper",
  "name": "Pending Leave Balance",
  "script": "frappe.ui.form.on('Leave Application', {\n    before_submit(frm) {\n        // Block submission if status is \"Pending Sufficient Balance\"\n        if (frm.doc.status === \"Pending Sufficient Balance\") {\n            frappe.throw(__(\"You cannot submit a Leave Application while it is in Pending Sufficient Balance status.\"));\n        }\n    },\n\n    validate(frm) {\n        // Only check and set status for Annual Leave\n        if (frm.doc.leave_type === \"Annual Leave\") {\n            frappe.call({\n                method: \"hrms.hr.doctype.leave_application.leave_application.get_leave_balance_on\",\n                args: {\n                    employee: frm.doc.employee,\n                    leave_type: frm.doc.leave_type,\n                    date: frm.doc.from_date\n                },\n                callback: function(r) {\n                    const balance = r.message || 0;\n                    const total_days = frm.doc.total_leave_days || 0;\n\n                    if (balance < total_days) {\n                        // Set status to pending if not already set\n                        if (frm.doc.status !== \"Pending Sufficient Balance\") {\n                            frm.set_value(\"status\", \"Pending Sufficient Balance\");\n                            frappe.msgprint({\n                                title: __(\"Insufficient Leave Balance\"),\n                                message: __(\"Leave balance is insufficient. Status set to 'Pending Sufficient Balance'.\"),\n                                indicator: \"orange\"\n                            });\n                        }\n                    }\n                }\n            });\n        }\n    }\n});",
  "view": "Form"
 }
]