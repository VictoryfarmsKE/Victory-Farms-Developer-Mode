[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-10-15 11:51:28.717600",
  "module": "VictoryFarmsDeveloper",
  "name": "Bank Remittance VF",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Payment Entry",
  "script": "if doc.payment_type == \"Pay\":\n    try:\n        # Get billing contact email instead of primary contact\n        billing_contact = frappe.db.sql(\"\"\"\n            SELECT c.email_id \n            FROM `tabContact` c\n            JOIN `tabDynamic Link` dl ON dl.parent = c.name\n            WHERE dl.link_doctype = 'Supplier' \n                AND dl.link_name = %s \n                AND c.is_billing_contact = 1\n            LIMIT 1\n        \"\"\", (doc.party_name,))\n        \n        supplier_email = billing_contact[0][0] if billing_contact else None\n        \n        # Fallback to primary contact if no billing contact found\n        if not supplier_email:\n            supplier_email = doc.contact_email\n            \n        owner_email = frappe.db.get_value(\"User\", doc.owner, \"email\")\n        \n        supplier = frappe.get_doc(\"Supplier\", doc.party_name) \n        if supplier.custom_localforeign != \"Local\":\n            frappe.log_error(f\"Supplier {doc.party_name} is not local. Email will not be sent.\")\n        else:\n            if not supplier_email:\n                frappe.log_error(f\"No supplier email found on Payment Entry {doc.name}\")\n            else:\n                # Attach PDF for the payment entry\n                pdf_attachment = frappe.attach_print(\n                    doctype=doc.doctype,\n                    name=doc.name,\n                    file_name=f\"{doc.name}\",\n                    print_letterhead=True\n                )\n\n                # Send email\n                frappe.sendmail(\n                    recipients=[supplier_email, owner_email],\n                    cc=[\"ap@victoryfarmskenya.com\"],\n                    # bcc=[\"joshuam@victoryfarmskenya.com\",\"christinek@victoryfarmskenya.com\"],\n                    expose_recipients=\"header\",\n                    now=True,\n                    subject=f\"Remittance Advice for {doc.party} from Victory Farms Limited\",\n                    message=(\n                        f\"Hello {doc.party_name},<br><br>\"\n                        f\"Please find attached the remittance advice for your recent payment from Victory Farms. \"\n                        f\"This remittance outlines the invoices that have been processed and paid.<br><br>\"\n                        f\"Reconcile and share an updated SOA to <a href='mailto:finance@victoryfarmskenya.com'>finance@victoryfarmskenya.com</a>.<br><br>\"\n                        f\"If you have any questions regarding this remittance or require further details, feel free to reach out to our finance team. <br><br>\"\n                        f\"We value your continued partnership and thank you for your service.<br><br>\"\n                        f\"Best Regards,<br>Victory Farms Finance Team\"\n                    ),\n                    attachments=[pdf_attachment]\n                )\n\n    except Exception as e:\n        frappe.log_error(\n            title=\"Bank Remittance Email Notification\",\n            message=f\"Email sending failed for {doc.name}: {e}\"\n        )",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-11 12:47:49.920885",
  "module": "VictoryFarmsDeveloper",
  "name": "PO Requistion Forms",
  "rate_limit_count": 0,
  "rate_limit_seconds": 0,
  "reference_doctype": "Purchase Order",
  "script": "# Create a set of unique custom requisitions from doc items\nrequisition_set = set(item.custom_requisition for item in doc.items if item.custom_requisition)\n\n# Clear the custom_connected_requisitions list in the document\ndoc.custom_connected_requisitions = []\n\n# Append each unique requisition to custom_connected_requisitions\nfor req in requisition_set:\n    doc.append(\"custom_connected_requisitions\", {\"requisition\": req})",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "delete_draft_invoices_worker",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-02 09:18:07.409559",
  "module": "VictoryFarmsDeveloper",
  "name": "Deleting Draft Invoices API",
  "rate_limit_count": 0,
  "rate_limit_seconds": 0,
  "reference_doctype": null,
  "script": "batch_size = 50\r\ndraft_invoices = frappe.get_all(\"Sales Invoice\", filters={\"docstatus\": 0}, fields=[\"name\"], limit=batch_size)\r\n\r\nif not draft_invoices:\r\n    frappe.log_error(\"No more draft invoices to delete.\", \"No more draft invoices to delete\")\r\nelse:\r\n    for invoice in draft_invoices:\r\n        frappe.delete_doc(\"Sales Invoice\", invoice.name, force=True)\r\n\r\n    frappe.db.commit()\r\n    frappe.enqueue(\"delete_draft_invoices_worker\", queue=\"long\", is_async=True)",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "Daily",
  "modified": "2025-04-02 09:18:16.287812",
  "module": "VictoryFarmsDeveloper",
  "name": "Deleting Draft Invoices",
  "rate_limit_count": 0,
  "rate_limit_seconds": 0,
  "reference_doctype": null,
  "script": "frappe.enqueue(\"delete_draft_invoices_worker\", queue=\"long\", is_async=True)",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-10 19:45:23.534259",
  "module": "VictoryFarmsDeveloper",
  "name": "Purchase Invoice Description",
  "rate_limit_count": 0,
  "rate_limit_seconds": 0,
  "reference_doctype": "Purchase Order",
  "script": "for item in doc.items:\r\n    item.description = \"\"\r\n    if item.custom_item_description:\r\n        item.description = item.custom_item_description\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-12 20:37:05.634935",
  "module": "VictoryFarmsDeveloper",
  "name": "Employee Document Folder Create",
  "rate_limit_count": 0,
  "rate_limit_seconds": 0,
  "reference_doctype": "Employee",
  "script": "folders = [\"Employment\", \"Disciplinary\", \"Performance Management\", \"Payroll Administration\"]\r\nparent_folder = f\"Home/Employee Documents/{doc.name}\"\r\n\r\n# Ensure root employee folder exists\r\nif not frappe.db.exists(\"File\", {\"file_name\": doc.name, \"folder\": \"Home/Employee Documents\", \"is_folder\": 1}):\r\n    frappe.get_doc({\r\n        \"doctype\": \"File\",\r\n        \"file_name\": doc.name,\r\n        \"folder\": \"Home/Employee Documents\",\r\n        \"is_folder\": 1,\r\n        \"is_private\": 1\r\n    }).insert(ignore_permissions=True)\r\n\r\n# Create subfolders\r\nfor folder in folders:\r\n    if not frappe.db.exists(\"File\", {\"file_name\": folder, \"folder\": parent_folder, \"is_folder\": 1}):\r\n        frappe.get_doc({\r\n            \"doctype\": \"File\",\r\n            \"file_name\": folder,\r\n            \"folder\": parent_folder,\r\n            \"is_folder\": 1,\r\n            \"is_private\": 1\r\n        }).insert(ignore_permissions=True)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-12 20:36:41.707423",
  "module": "VictoryFarmsDeveloper",
  "name": "Employee Documents Permissions",
  "rate_limit_count": 0,
  "rate_limit_seconds": 0,
  "reference_doctype": "File",
  "script": "hr_roles = [\"HR Manager\", \"HR Assistant\", \"Payroll Officer\"]\r\n\r\nuser_roles = [r.role for r in frappe.get_all(\"Has Role\", filters={\"parent\": frappe.session.user}, fields=[\"role\"])]\r\n\r\n# Check if the user has any HR role\r\nif not set(hr_roles).intersection(user_roles):\r\n    condition = \"`tabFile`.`folder` NOT LIKE 'Home/Employee Documents%'\"\r\nelse:\r\n    condition = \"1=1\"\r\n\r\ncondition\r\n",
  "script_type": "Permission Query"
 }
]